{"version":3,"sources":["components/Nominations.js","components/Results.js","components/OMDbPortal.js","index.js"],"names":["Nominations","props","nominationsList","length","map","movie","key","src","Poster","alt","style","height","Title","Year","onClick","checkNominations","imdbID","i","Results","resultsList","searchResults","searchPrompt","class","className","Object","keys","Search","disabled","OMDbPortal","searchOMDb","searchRender","a","state","window","alert","fetch","response","json","jsonData","setState","searchMade","console","log","handleChange","bind","value","this","index","nominationsListUpdated","push","filter","item","strings","typeSpeed","backSpeed","attr","loop","type","name","onChange","e","target","addNomination","removeNomination","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAMO,SAASA,EAAYC,GAExB,IAAMC,EAAkBD,EAAMC,gBAE9B,OACA,gCACA,kDAAqBA,EAAgBC,OAArC,SACA,6BACCD,EAAgBE,KAAI,SAACC,EAAOC,GACrB,OACI,+BACI,qBAAKC,IAAKF,EAAMG,OAAQC,IAAI,QAAQC,MAAO,CAACC,OAAQ,WADxD,IACyE,uBAAMN,EAAMO,MADrF,KAC8FP,EAAMQ,KADpG,IAC0G,uBACtG,wBAAQC,QAAS,kBAAMb,EAAMa,QAAQR,IAArC,+BCZpB,SAASS,EAAiBb,EAAiBc,GACzC,IAAK,IAAIC,EAAI,EAAIA,EAAIf,EAAgBC,OAASc,IAC5C,GAAIf,EAAgBe,GAAGD,SAAWA,EAChC,OAAO,EAGX,OAAO,EAMF,SAASE,EAAQjB,GAEpB,IAAMkB,EAAalB,EAAMmB,cACnBC,EAAepB,EAAMoB,aACrBnB,EAAkBD,EAAMC,gBAE9B,OACE,sBAAKoB,MAAM,aAAaC,UAAU,cAAlC,UACI,+CAAkBF,EAAlB,QACA,6BACGG,OAAOC,KAAKN,EAAYO,QAAQtB,KAAI,SAACC,EAAOC,GAC3C,OAAO,mCAAK,qBAAKC,IAAKY,EAAYO,OAAOpB,GAAKE,OAAQC,IAAI,QAAQC,MAAO,CAACC,OAAQ,WAA3E,IAA4F,uBAA5F,IAAmGQ,EAAYO,OAAOpB,GAAKM,MAA3H,KAAoIO,EAAYO,OAAOpB,GAAKO,KAA5J,KAAmK,uBACzKE,EAAiBb,EAAiBiB,EAAYO,OAAOpB,GAAKU,QACzD,wBAAQW,UAAU,EAAlB,sBAEA,wBAAQb,QAAS,kBAAMb,EAAMa,QAAQR,IAArC,iC,UCvBHsB,EAAb,kDAEI,WAAY3B,GAAQ,IAAD,8BACf,cAAMA,IAwBV4B,WAzBmB,uCAyBN,WAAOC,GAAP,iBAAAC,EAAA,yDACoB,IAA3B,EAAKC,MAAMF,aADJ,gBAETG,OAAOC,MAAM,2BAFJ,uCAIcC,MAAM,yDAA2DL,GAJ/E,cAIHM,EAJG,gBAKcA,EAASC,OALvB,OAKHC,EALG,OAMT,EAAKN,MAAMZ,cAAgBkB,EAC3B,EAAKC,SAAS,CACZnB,cAAe,EAAKY,MAAMZ,cAC1BoB,YAAY,EACZnB,aAAcS,IAEhBW,QAAQC,IAAI,mBAZH,4CAzBM,sDAEf,EAAKV,MAAQ,CACXX,aAAc,GACdS,aAAc,GACdV,cAAe,GACflB,gBAAiB,GACjBsC,YAAY,GAEd,EAAKG,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKf,WAAa,EAAKA,WAAWe,KAAhB,gBAVH,EAFvB,gDAkBI,SAAaC,GACXC,KAAKP,SAAS,CACZT,aAAce,MApBtB,2BA8CI,SAAcE,GACZ,GAAyC,GAArCD,KAAKd,MAAM9B,gBAAgBC,OAC7B8B,OAAOC,MAAM,2CACR,CACL,IAAIc,EAAyBF,KAAKd,MAAM9B,gBACxC8C,EAAuBC,KAAKH,KAAKd,MAAMZ,cAAcM,OAAOqB,IAC5DD,KAAKP,SAAS,CACZrC,gBAAiB8C,IAEnBP,QAAQC,IAAIM,MAvDpB,8BA8DI,SAAiBD,GACf,IAAIC,EAAyBF,KAAKd,MAAM9B,gBAAgBgD,QAAO,SAAUC,EAAM7C,GAC7E,OAAOA,GAAOyC,KAEhBD,KAAKP,SAAS,CACZrC,gBAAiB8C,MAnEzB,oBAuEI,WAAU,IAAD,OACP,OACA,sBAAKzB,UAAU,SAAf,UACA,gDACE,sBAAKA,UAAW,YAAhB,UACE,6CACA,cAAC,IAAD,CACA6B,QAAS,CACL,oBACA,sBACA,oBACA,oBACA,yBACA,oBACAC,UAAW,GACXC,UAAW,GACXC,KAAK,cACLC,MAAI,EAXR,SAYA,uBAAOjC,UAAU,gBAAgBkC,KAAK,OAAOC,KAAK,cAAcb,MAAOC,KAAKd,MAAMF,aAAc6B,SAAU,SAAAC,GAAC,OAAI,EAAKjB,aAAaiB,EAAEC,OAAOhB,YAE1I,wBAAQ/B,QAAS,kBAAM,EAAKe,WAAW,EAAKG,MAAMF,eAAlD,uBAEA,qBAAKP,UAAU,aAAf,SACGuB,KAAKd,MAAMQ,YACZ,cAACtB,EAAD,aAAShB,gBAAiB4C,KAAKd,MAAM9B,gBAAiBkB,cAAe0B,KAAKd,MAAMZ,cAAeC,aAAcyB,KAAKd,MAAMX,aAAcP,QAAS,SAACE,EAAQ+B,GAAT,OAAmB,EAAKe,cAAc9C,EAAQ+B,KAA7L,kBAAsND,KAAKd,MAAM9B,oBAGnO,qBAAKqB,UAAU,iBAAf,SACGuB,KAAKd,MAAMQ,YACZ,cAACxC,EAAD,CAAaoB,cAAe0B,KAAKd,MAAMZ,cAAelB,gBAAiB4C,KAAKd,MAAM9B,gBAAiBY,QAAS,SAACE,GAAD,OAAY,EAAK+C,iBAAiB/C,eApG1J,GAAgCgD,IAAMC,WCJtCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.568cb682.chunk.js","sourcesContent":["import React from 'react';\nimport '../index.css';\n\n/**\n * Renders the Nominations components which provides a list of the nominated movies found, their title, their year released, their poster as well as a button to remove the movie from their nominations list.\n */\nexport function Nominations(props) {\n\n    const nominationsList = props.nominationsList;\n\n    return (\n    <div>\n    <p>Your Nominations {nominationsList.length}/5:</p>\n    <ul> \n    {nominationsList.map((movie, key) => {\n            return(\n                <li>\n                    <img src={movie.Poster} alt='movie' style={{height: \"200px\"}}></img> <br/>{movie.Title} ({movie.Year})<br/> \n                    <button onClick={() => props.onClick(key)}>Remove</button>\n                </li>\n            )\n            })}\n    </ul>\n    </div>\n    )\n}\n\n  ","import React from 'react';\nimport '../index.css';\n\n/**\n * Checks if the movie exists in the list of nominations and returns a boolean value.\n */\nfunction checkNominations(nominationsList, imdbID) {\n  for (let i = 0 ; i < nominationsList.length ; i++) {\n    if (nominationsList[i].imdbID === imdbID) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Renders the Results components which provides a list of the movies found, their title, their year released, their poster as well as a button to nominate the movie.\n */\nexport function Results(props) {\n\n    const resultsList= props.searchResults;\n    const searchPrompt = props.searchPrompt;\n    const nominationsList = props.nominationsList;\n    \n    return(\n      <div class=\"resultsBar\" className=\"ResultsList\" >\n          <p> Results for \"{searchPrompt}\":</p>\n          <ul>\n            {Object.keys(resultsList.Search).map((movie, key) => {\n              return(<li> <img src={resultsList.Search[key].Poster} alt='movie' style={{height: \"200px\"}}></img> <br/> {resultsList.Search[key].Title} ({resultsList.Search[key].Year}) <br/>\n              {checkNominations(nominationsList, resultsList.Search[key].imdbID) ?\n                <button disabled={true}>Nominate</button>\n              :\n                <button onClick={() => props.onClick(key)}>Nominate</button>\n              }\n                </li>)\n            })}\n          </ul>\n      </div>\n    )\n}","import React from 'react';\nimport Typed from 'react-typed';\nimport {Nominations} from './Nominations'\nimport {Results} from './Results'\nimport '../index.css';\nimport Banner from 'react-js-banner';\n\n/**\n * This class is the main parent class that renders the Results, Nominations and the search bar. It also holds the state variables and is responsible for updating the list of search results as well as the nomination results.\n */\nexport class OMDbPortal extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          searchPrompt: \"\", // Holds the user's search prompt after making the search (static).\n          searchRender: \"\", // Holds the user's search prompt while making the search (dynamically changed).\n          searchResults: {}, // Retrieves the JSON response from the OMDb API.\n          nominationsList: [], // Holds each movie's JSON object that gets nominated by the user.\n          searchMade: false, // checks if the user has made a search.\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.searchOMDb = this.searchOMDb.bind(this);\n      }\n    \n    /**\n     * Handles the change in value of the search bar's input.\n     */\n    handleChange(value) {\n      this.setState({\n        searchRender: value\n      });\n    }\n  \n    /**\n     * Asychronously fetches the JSON response based on the user's input and retrieves back the list of movies. This also updates the state's search prompt and the boolean value to notify the portal that a search was made.\n     */\n    searchOMDb = async (searchRender) =>  {\n      if (this.state.searchRender == \"\") {\n        window.alert(\"Enter a movie title :)!\");\n      } else {\n        const response = await fetch('https://www.omdbapi.com/?i=tt3896198&apikey=686c061&s=' + searchRender);\n        const jsonData = await response.json();\n        this.state.searchResults = jsonData;\n        this.setState({\n          searchResults: this.state.searchResults,\n          searchMade: true,\n          searchPrompt: searchRender\n        });\n        console.log(\"This was made 2\");\n      }\n    }\n  \n    /**\n     * Adds the movie's JSON object if it is nominated based on the index of the search results and updates the state.\n     */\n    addNomination(index) {\n      if (this.state.nominationsList.length == 5) {\n        window.alert(\"You can only have 5 nominations! ;)\")\n      } else {\n        var nominationsListUpdated = this.state.nominationsList;\n        nominationsListUpdated.push(this.state.searchResults.Search[index]);\n        this.setState({\n          nominationsList: nominationsListUpdated\n        });\n        console.log(nominationsListUpdated);\n      }\n    }\n  \n    /**\n     * Removes the movie's JSON object from the nominations list and updates the state.\n     */\n    removeNomination(index) {\n      var nominationsListUpdated = this.state.nominationsList.filter(function (item, key) {\n        return key != index;\n      });\n      this.setState({\n        nominationsList: nominationsListUpdated\n      });  \n    }\n  \n    render() {\n      return (\n      <div className=\"Portal\"> \n      <h1> The Shoppies </h1>\n        <div className =\"SearchBar\">\n          <p>Movie Title:</p>\n          <Typed \n          strings={[\n              'Search for horror',\n              'Search for thriller',\n              'Search for action',\n              'Search for comedy',\n              'Search for documentary',\n              'Search for drama']}\n              typeSpeed={40}\n              backSpeed={50}\n              attr=\"placeholder\"\n              loop >\n          <input className=\"TypedInputBar\" type=\"text\" name=\"searchInput\" value={this.state.searchRender} onChange={e => this.handleChange(e.target.value)}/>\n          </Typed>    \n          <button onClick={() => this.searchOMDb(this.state.searchRender)}>Search</button>\n          </div>\n          <div className=\"ResultsBar\">\n            {this.state.searchMade && \n            <Results nominationsList={this.state.nominationsList} searchResults={this.state.searchResults} searchPrompt={this.state.searchPrompt} onClick={(imdbID, index) => this.addNomination(imdbID, index)} nominationsList={this.state.nominationsList}/>\n            }\n          </div>\n          <div className=\"NominationsBar\">\n            {this.state.searchMade &&\n            <Nominations searchResults={this.state.searchResults} nominationsList={this.state.nominationsList} onClick={(imdbID) => this.removeNomination(imdbID)}/>\n            }\n          </div>\n      </div>\n      )\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Typed from 'react-typed';\nimport {OMDbPortal} from './components/OMDbPortal'\n\nReactDOM.render(\n  <React.StrictMode>\n    <OMDbPortal />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}